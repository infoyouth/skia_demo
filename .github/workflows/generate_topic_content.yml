name: Generate Topic Content

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu
        pip install transformers markdownify

    - name: Read topic from JSON
      id: read_topic
      run: |
        python - <<EOF
        import json
        from datetime import datetime
        with open('topics.json', 'r') as f:
            data = json.load(f)
        today = datetime.today().strftime('%d-%m-%Y')
        for entry in data['topics']:
            if entry['date'] == today:
                print(f"::set-output name=topic::{entry['topic']}")
                print(f"::set-output name=date::{entry['date']}")
                break
        EOF

    - name: Generate content using GPT-2
      id: generate_content
      run: |
        python - <<EOF
        from transformers import pipeline
        import markdownify
        from datetime import datetime

        topic = '${{ steps.read_topic.outputs.topic }}'
        today = datetime.today().strftime('%d-%m-%Y')

        # Initialize GPT-2 text generation model
        gpt2_pipeline = pipeline("text-generation", model="gpt2")

        # Provide a prompt for the model
        prompt = f"Write a tutorial about {topic} covering Introduction, Key Concepts, How to Use, Common Pitfalls, and Advanced Use Cases."

        # Generate the text from GPT-2
        generated_text = gpt2_pipeline(prompt, max_length=1000)[0]['generated_text']
        markdown_content = markdownify.markdownify(generated_text)

        # Write the markdown content to a file
        filename = f"{today}_{topic.replace(' ', '_')}.md"
        with open(filename, 'w') as f:
            f.write(f"# {topic}\n\n")
            f.write(markdown_content)
        EOF

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        title: "Add generated markdown for ${{ steps.read_topic.outputs.topic }} on ${{ steps.read_topic.outputs.date }}"
        body: "This PR contains a generated markdown file about **${{ steps.read_topic.outputs.topic }}**."
        base: main
        branch: topic-update  # A fixed branch name for the PR
        commit-message: "Add generated markdown for ${{ steps.read_topic.outputs.topic }} on ${{ steps.read_topic.outputs.date }}"
